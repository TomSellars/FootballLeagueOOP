/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jflmanagement.GUI;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import jflmanagement.Coach;
import jflmanagement.Match;
import jflmanagement.Player;
import jflmanagement.Referee;
import jflmanagement.Team;
import jflmanagement.data.JFLManagement;

/**
 *
 * @author Tom
 */
public class JFLGUI extends javax.swing.JFrame {

    JFLManagement Management = new JFLManagement();
    private ArrayList<Player> goals = new ArrayList();
    private ArrayList<Player> assists = new ArrayList();
    private ArrayList<Player> yellowCards = new ArrayList();
    private ArrayList<Player> redCards = new ArrayList();

    int homeScores = 0;
    int awayScores = 0;

    /**
     * Creates new form JFLGUI
     */
    public JFLGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbdpaneJFLManagement = new javax.swing.JTabbedPane();
        pnlManage = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPlayers = new javax.swing.JList<>();
        btnDeletePlayer = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btnDeleteTeam = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTeams = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        btnAddPlayerToTeam = new javax.swing.JButton();
        btnRemovePlayerfromTeam = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstCoaches = new javax.swing.JList<>();
        btnDeleteCoach = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstReferees = new javax.swing.JList<>();
        jLabel21 = new javax.swing.JLabel();
        btnDeleteReferee = new javax.swing.JButton();
        btnAddCoach = new javax.swing.JButton();
        btnRemoveCoach = new javax.swing.JButton();
        pnlCreate = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtTeamName = new javax.swing.JTextField();
        btnCreateTeam = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPlayerFName = new javax.swing.JTextField();
        txtPlayerLName = new javax.swing.JTextField();
        spnPlayerAge = new javax.swing.JSpinner();
        cmbPlayerPosition = new javax.swing.JComboBox<>();
        btnCreatePlayer = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtCoachLName = new javax.swing.JTextField();
        txtCoachFName = new javax.swing.JTextField();
        spnCoachAge = new javax.swing.JSpinner();
        cmbCoachFormation = new javax.swing.JComboBox<>();
        btnCreateCoach = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtRefFName = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtRefLName = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        spnRefAge = new javax.swing.JSpinner();
        jLabel20 = new javax.swing.JLabel();
        cmbRefWork = new javax.swing.JComboBox<>();
        btnCreateReferee = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        LeagueTableManager.setColumnIdentifiers (leagueColumns);
        tblMatches = new javax.swing.JTable();
        Management.updateLeagueTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstHomeTeam = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        lstAwayTeam = new javax.swing.JList<>();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        spnHomeScore = new javax.swing.JSpinner();
        spnAwayScore = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        btnCreateMatch = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        spnMatchWeek = new javax.swing.JSpinner();
        jScrollPane11 = new javax.swing.JScrollPane();
        lstRefereesCreateMatch = new javax.swing.JList<>();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        lstHomePlayers = new javax.swing.JList<>();
        jLabel28 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        lstAwayPlayers = new javax.swing.JList<>();
        btnScoredGoal = new javax.swing.JButton();
        btnAssist = new javax.swing.JButton();
        btnRedCard = new javax.swing.JButton();
        btnYellowCard = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstMatches = new javax.swing.JList<>();
        btnSelectMatch = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        lstViewHome = new javax.swing.JList<>();
        lstViewHome.setModel(ViewHomePlayersListManager);
        lstViewHome.setVisible(false);
        jScrollPane10 = new javax.swing.JScrollPane();
        lstViewAway = new javax.swing.JList<>();
        lstViewAway.setModel(ViewAwayPlayersListManager);
        lstViewAway.setVisible(false);
        lblViewMatchHome = new javax.swing.JLabel();
        lblViewMatchHome.setVisible(false);
        lblViewMatchAway = new javax.swing.JLabel();
        lblViewMatchAway.setVisible(false);
        lblAwayScore = new javax.swing.JLabel();
        lblAwayScore.setVisible(false);
        lblHomeScore = new javax.swing.JLabel();
        lblHomeScore.setVisible(false);
        jScrollPane14 = new javax.swing.JScrollPane();
        lstGoals = new javax.swing.JList<>();
        lstGoals.setModel(ViewGoalsListManager);
        lstGoals.setVisible(false);
        jScrollPane15 = new javax.swing.JScrollPane();
        lstAssists = new javax.swing.JList<>();
        lstAssists.setModel(ViewAssistsListManager);
        lstAssists.setVisible(false);
        jScrollPane16 = new javax.swing.JScrollPane();
        lstYellowCards = new javax.swing.JList<>();
        lstYellowCards.setModel(ViewYellowCardsListManager);
        lstYellowCards.setVisible(false);
        jScrollPane17 = new javax.swing.JScrollPane();
        lstRedCards = new javax.swing.JList<>();
        lstRedCards.setModel(ViewRedCardsListManager);
        lstRedCards.setVisible(false);
        lblGoals = new javax.swing.JLabel();
        lblGoals.setVisible(false);
        lblAssists = new javax.swing.JLabel();
        lblAssists.setVisible(false);
        lblYellowCards = new javax.swing.JLabel();
        lblYellowCards.setVisible(false);
        lblRedCards = new javax.swing.JLabel();
        lblRedCards.setVisible(false);
        lblMatchWeek = new javax.swing.JLabel();
        lblMatchWeek.setVisible(false);
        jPanel4 = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        PlayerTableManager.setColumnIdentifiers(playerColumns);
        tblPlayers = new javax.swing.JTable();
        tblPlayers.setAutoCreateRowSorter(true);
        Management.updatePlayerTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        lstPlayerProfiles = new javax.swing.JList<>();
        lstPlayerProfiles.setModel(PlayerListManager);
        btnSelectPlayer = new javax.swing.JButton();
        jScrollPane20 = new javax.swing.JScrollPane();
        lstPlayerMatches = new javax.swing.JList<>();
        lstPlayerMatches.setVisible(false);
        lblPlayerName = new javax.swing.JLabel();
        lblPlayerName.setVisible(false);
        lblPlayerTeam = new javax.swing.JLabel();
        lblPlayerTeam.setVisible(false);
        lblPlayerAge = new javax.swing.JLabel();
        lblPlayerAge.setVisible(false);
        lblPlayerPosition = new javax.swing.JLabel();
        lblPlayerPosition.setVisible(false);
        lblPlayerGoals = new javax.swing.JLabel();
        lblPlayerGoals.setVisible(false);
        lblPlayerAssists = new javax.swing.JLabel();
        lblPlayerAssists.setVisible(false);
        lblPlayerYellowCards = new javax.swing.JLabel();
        lblPlayerYellowCards.setVisible(false);
        lblPlayerRedCards = new javax.swing.JLabel();
        lblPlayerRedCards.setVisible(false);
        jLabel31 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        txtSearchFName = new javax.swing.JTextField();
        txtSearchLName = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cmbSearchPosition = new javax.swing.JComboBox<>();
        cmbSearchJob = new javax.swing.JComboBox<>();
        jScrollPane21 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuBar = new javax.swing.JMenu();
        mnuSave = new javax.swing.JMenuItem();
        mnuLoad = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JFL Management");
        setName("JFL Management"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lstPlayers.setModel(PlayerListManager);
        jScrollPane1.setViewportView(lstPlayers);

        btnDeletePlayer.setText("Delete Player");
        btnDeletePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePlayerActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Players");

        btnDeleteTeam.setText("Delete Team");
        btnDeleteTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTeamActionPerformed(evt);
            }
        });

        lstTeams.setModel(TeamListManager);
        jScrollPane2.setViewportView(lstTeams);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Teams");

        btnAddPlayerToTeam.setText("Add Player to Team");
        btnAddPlayerToTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPlayerToTeamActionPerformed(evt);
            }
        });

        btnRemovePlayerfromTeam.setText("Remove Player from Team");
        btnRemovePlayerfromTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePlayerfromTeamActionPerformed(evt);
            }
        });

        lstCoaches.setModel(CoachListManager);
        jScrollPane3.setViewportView(lstCoaches);

        btnDeleteCoach.setText("Delete Coach");
        btnDeleteCoach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCoachActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Coaches");

        lstReferees.setModel(RefereeListManager);
        jScrollPane4.setViewportView(lstReferees);

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel21.setText("Referees");

        btnDeleteReferee.setText("Delete Referee");
        btnDeleteReferee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRefereeActionPerformed(evt);
            }
        });

        btnAddCoach.setText("Add Coach to team");
        btnAddCoach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCoachActionPerformed(evt);
            }
        });

        btnRemoveCoach.setText("Remove Coach from team");
        btnRemoveCoach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveCoachActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlManageLayout = new javax.swing.GroupLayout(pnlManage);
        pnlManage.setLayout(pnlManageLayout);
        pnlManageLayout.setHorizontalGroup(
            pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlManageLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDeleteTeam)
                    .addComponent(jLabel15))
                .addGap(35, 35, 35)
                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddCoach)
                    .addComponent(btnRemoveCoach))
                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlManageLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jLabel21))
                    .addGroup(pnlManageLayout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(btnDeletePlayer)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlManageLayout.createSequentialGroup()
                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlManageLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btnDeleteCoach)
                        .addGap(261, 261, 261)
                        .addComponent(btnDeleteReferee))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlManageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlManageLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddPlayerToTeam)
                                    .addComponent(btnRemovePlayerfromTeam)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 268, Short.MAX_VALUE))
            .addGroup(pnlManageLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(385, 385, 385))
        );
        pnlManageLayout.setVerticalGroup(
            pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlManageLayout.createSequentialGroup()
                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlManageLayout.createSequentialGroup()
                        .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlManageLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlManageLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlManageLayout.createSequentialGroup()
                                        .addComponent(btnAddPlayerToTeam)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnRemovePlayerfromTeam))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlManageLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(btnDeleteTeam))
                            .addGroup(pnlManageLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeletePlayer))))
                    .addGroup(pnlManageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAddCoach)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemoveCoach)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlManageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteCoach)
                    .addComponent(btnDeleteReferee))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        tbdpaneJFLManagement.addTab("Manage", pnlManage);

        jLabel2.setText("Team Name");

        btnCreateTeam.setText("Create Team");
        btnCreateTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateTeamActionPerformed(evt);
            }
        });

        jLabel1.setText("Player First Name");

        jLabel3.setText("Player Last Name");

        jLabel4.setText("Player Age");

        jLabel5.setText("Player Position");

        cmbPlayerPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FW", "MF", "DF", "GK" }));

        btnCreatePlayer.setText("Create Player");
        btnCreatePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePlayerActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Create Teams");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Create Players");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Create Coach");

        jLabel11.setText("Coach First Name");

        jLabel12.setText("Coach Last Name");

        jLabel13.setText("Coach Age");

        jLabel14.setText("Coach Preferred Formation");

        cmbCoachFormation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[3-3-4]", "[3-4-3]", "[3-6-1]", "[4-3-3]", "[4-4-2]", "[5-3-2]", "[5-4-1]" }));

        btnCreateCoach.setText("Create Coach");
        btnCreateCoach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCoachActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Create Referee");

        jLabel17.setText("Referee First Name");

        jLabel18.setText("Referee Last Name");

        jLabel19.setText("Referee Age");

        jLabel20.setText("Referee Work Type");

        cmbRefWork.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full-Time", "Part-Time" }));

        btnCreateReferee.setText("Create Referee");
        btnCreateReferee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRefereeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCreateLayout = new javax.swing.GroupLayout(pnlCreate);
        pnlCreate.setLayout(pnlCreateLayout);
        pnlCreateLayout.setHorizontalGroup(
            pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCreateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPlayerLName, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spnPlayerAge, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbPlayerPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPlayerFName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(txtTeamName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCreateTeam))
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel9))))
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(btnCreatePlayer)))
                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel13))
                                .addGap(7, 7, 7)
                                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtCoachFName)
                                        .addComponent(txtCoachLName, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCreateLayout.createSequentialGroup()
                                        .addComponent(spnCoachAge, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(71, 71, 71))))
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(jLabel10))
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbCoachFormation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(btnCreateCoach))))
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnCreateReferee))
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCreateLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel18)))
                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtRefFName)
                                    .addComponent(txtRefLName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spnRefAge, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbRefWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlCreateLayout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(jLabel16)))))
                .addGap(0, 285, Short.MAX_VALUE))
        );
        pnlCreateLayout.setVerticalGroup(
            pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCreateLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtTeamName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreateTeam)))
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtCoachFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtCoachLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(spnCoachAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(cmbCoachFormation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCreateCoach)))
                .addGap(36, 36, 36)
                .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtPlayerFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtPlayerLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(spnPlayerAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbPlayerPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCreatePlayer))
                    .addGroup(pnlCreateLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(txtRefFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(txtRefLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(spnRefAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(cmbRefWork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCreateReferee)))
                .addContainerGap(291, Short.MAX_VALUE))
        );

        tbdpaneJFLManagement.addTab("Create People and Teams", pnlCreate);

        tblMatches.setModel(LeagueTableManager);
        tblMatches.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(tblMatches);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 942, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
                .addContainerGap())
        );

        tbdpaneJFLManagement.addTab("League Table", jPanel1);

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel23.setText("Teams");

        jLabel22.setText("Home Team");

        lstHomeTeam.setModel(TeamListManager);
        lstHomeTeam.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstHomeTeamValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(lstHomeTeam);

        lstAwayTeam.setModel(TeamListManager);
        lstAwayTeam.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstAwayTeamValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(lstAwayTeam);

        jLabel24.setText("Away Team");

        jLabel25.setText("Home Team Score:");

        jLabel26.setText("Away Team Score:");

        btnCreateMatch.setText("Create Match");
        btnCreateMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateMatchActionPerformed(evt);
            }
        });

        jLabel29.setText("Week of Match:");

        lstRefereesCreateMatch.setModel(RefereeListManager);
        jScrollPane11.setViewportView(lstRefereesCreateMatch);

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel27.setText("Referees");

        lstHomePlayers.setModel(CreateHomePlayersListManager);
        jScrollPane13.setViewportView(lstHomePlayers);

        jLabel28.setText("Home Team Players");

        jLabel30.setText("Away Team Players");

        lstAwayPlayers.setModel(CreateAwayPlayersListManager);
        jScrollPane12.setViewportView(lstAwayPlayers);

        btnScoredGoal.setText("Scored a Goal.");
        btnScoredGoal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScoredGoalActionPerformed(evt);
            }
        });

        btnAssist.setText("Assist");
        btnAssist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssistActionPerformed(evt);
            }
        });

        btnRedCard.setText("Red Card");
        btnRedCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedCardActionPerformed(evt);
            }
        });

        btnYellowCard.setText("Yellow Card");
        btnYellowCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYellowCardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnHomeScore, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnCreateMatch)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel29)
                                        .addComponent(jLabel26))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(spnAwayScore, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                        .addComponent(spnMatchWeek))))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnScoredGoal)
                                    .addComponent(btnAssist)
                                    .addComponent(btnYellowCard)
                                    .addComponent(btnRedCard))))))
                .addGap(76, 76, 76)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addGap(48, 48, 48)))
                .addGap(319, 319, 319))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel24))
                                .addGap(5, 5, 5)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel25)
                                    .addComponent(spnHomeScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(spnAwayScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel29)
                                    .addComponent(spnMatchWeek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(84, 84, 84)
                                .addComponent(btnCreateMatch))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(47, 47, 47)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                        .addComponent(jScrollPane12))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnScoredGoal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAssist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnYellowCard)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRedCard)))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        tbdpaneJFLManagement.addTab("Create Matches", jPanel3);

        lstMatches.setModel(MatchesListManager);
        lstMatches.setFixedCellWidth(150);
        jScrollPane5.setViewportView(lstMatches);

        btnSelectMatch.setText("Select Match");
        btnSelectMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectMatchActionPerformed(evt);
            }
        });

        jScrollPane9.setViewportView(lstViewHome);

        jScrollPane10.setViewportView(lstViewAway);

        lblViewMatchHome.setText("jLabel27");

        lblViewMatchAway.setText("jLabel28");

        lblAwayScore.setText("jLabel27");

        lblHomeScore.setText("jLabel28");

        jScrollPane14.setViewportView(lstGoals);

        jScrollPane15.setViewportView(lstAssists);

        jScrollPane16.setViewportView(lstYellowCards);

        jScrollPane17.setViewportView(lstRedCards);

        lblGoals.setText("Goals");

        lblAssists.setText("Assists");

        lblYellowCards.setText("Yellow Cards");

        lblRedCards.setText("Red Cards");

        lblMatchWeek.setText("jLabel31");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(83, 83, 83)
                                        .addComponent(btnSelectMatch))
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(39, 39, 39)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMatchWeek)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGap(58, 58, 58)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblHomeScore)
                                                    .addComponent(lblViewMatchHome))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(lblAwayScore)
                                                    .addComponent(lblViewMatchAway))
                                                .addGap(61, 61, 61))))))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(lblGoals)
                        .addGap(138, 138, 138)
                        .addComponent(lblAssists)
                        .addGap(124, 124, 124)
                        .addComponent(lblYellowCards)
                        .addGap(118, 118, 118)
                        .addComponent(lblRedCards)))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSelectMatch))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAwayScore)
                            .addComponent(lblHomeScore))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblViewMatchHome)
                            .addComponent(lblViewMatchAway))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(jScrollPane10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMatchWeek)))
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGoals)
                    .addComponent(lblAssists)
                    .addComponent(lblYellowCards)
                    .addComponent(lblRedCards))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addComponent(jScrollPane15)
                    .addComponent(jScrollPane16)
                    .addComponent(jScrollPane17))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbdpaneJFLManagement.addTab("View Matches", jPanel2);

        tblPlayers.setModel(PlayerTableManager);
        jScrollPane18.setViewportView(tblPlayers);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 956, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
        );

        tbdpaneJFLManagement.addTab("Player Stats table", jPanel4);

        jScrollPane19.setViewportView(lstPlayerProfiles);

        btnSelectPlayer.setText("Select Player");
        btnSelectPlayer.setToolTipText("");
        btnSelectPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectPlayerActionPerformed(evt);
            }
        });

        lstPlayerMatches.setModel(PlayerMatchListManager);
        jScrollPane20.setViewportView(lstPlayerMatches);

        lblPlayerName.setText("jLabel31");

        lblPlayerTeam.setText("jLabel31");

        lblPlayerAge.setText("jLabel31");

        lblPlayerPosition.setText("jLabel31");

        lblPlayerGoals.setText("jLabel31");

        lblPlayerAssists.setText("jLabel31");

        lblPlayerYellowCards.setText("jLabel31");

        lblPlayerRedCards.setText("jLabel31");

        jLabel31.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel31.setText("Match History");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPlayerGoals)
                    .addComponent(lblPlayerAssists)
                    .addComponent(lblPlayerYellowCards)
                    .addComponent(lblPlayerTeam)
                    .addComponent(lblPlayerRedCards)
                    .addComponent(lblPlayerPosition)
                    .addComponent(lblPlayerAge)
                    .addComponent(lblPlayerName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 377, Short.MAX_VALUE)
                .addComponent(jLabel31)
                .addGap(135, 135, 135))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(btnSelectPlayer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane20, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(lblPlayerName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPlayerAge)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblPlayerPosition)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(lblPlayerGoals)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblPlayerAssists)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblPlayerYellowCards)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblPlayerRedCards))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(lblPlayerTeam)
                                        .addGap(99, 99, 99)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectPlayer)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(19, 19, 19))
        );

        tbdpaneJFLManagement.addTab("Player Profiles", jPanel5);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cmbSearchPosition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Position", "FW", "MF", "DF", "GK" }));

        cmbSearchJob.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Job", "Player", "Coach", "Referee" }));

        jList1.setModel(SearchResultsListManager);
        jScrollPane21.setViewportView(jList1);

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel32.setText("Results");

        jLabel33.setText("First Name");

        jLabel34.setText("Last Name");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33)
                            .addComponent(jLabel34))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearchFName, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchLName, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbSearchPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbSearchJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(btnSearch)))
                .addGap(42, 42, 42)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jLabel32)))
                .addContainerGap(178, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbSearchPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchLName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbSearchJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34))
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        tbdpaneJFLManagement.addTab("Search", jPanel6);

        mnuBar.setText("File");

        mnuSave.setText("Save Data");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        mnuBar.add(mnuSave);

        mnuLoad.setText("Load Match Data");
        mnuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadActionPerformed(evt);
            }
        });
        mnuBar.add(mnuLoad);

        jMenuBar1.add(mnuBar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tbdpaneJFLManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 961, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tbdpaneJFLManagement)
        );

        tbdpaneJFLManagement.getAccessibleContext().setAccessibleName("TabbedPane");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateMatchActionPerformed

        //Gets the data from the GUI
        Team homeTeam = Management.getTeam(lstHomeTeam.getSelectedIndex());
        Team awayTeam = Management.getTeam(lstAwayTeam.getSelectedIndex());
        Referee matchRef = null;
        String spnHomeValue = spnHomeScore.getValue().toString();
        String spnAwayValue = spnAwayScore.getValue().toString();
        String spnWeek = spnMatchWeek.getValue().toString();
        Boolean sameTeam = homeTeam.getTeamName().equals(awayTeam.getTeamName());

        //Creates these variables
        int homeScore = -1;
        int awayScore = -1;
        int matchWeek = -1;
        int totalGoals = -1;

        //Check to see if the scores are positive
        if (Integer.parseInt(spnHomeValue) >= 0 && Integer.parseInt(spnAwayValue) >= 0 && Integer.parseInt(spnWeek) >= 0) {
            homeScore = Integer.parseInt(spnHomeValue);
            awayScore = Integer.parseInt(spnAwayValue);
            matchWeek = Integer.parseInt(spnWeek);
            totalGoals = homeScore + awayScore;
            //Checks to see if a referee is selected
            if (lstRefereesCreateMatch.getSelectedIndex() >= 0) {
                //Gets the selected Referee
                matchRef = Management.getReferee(lstRefereesCreateMatch.getSelectedIndex());
                //Checks to see if the match is between two different teams and that the Referee exists
                if (sameTeam == false && matchRef != null) {
                    //Checks to see if enough goals have been scored
                    if (goals.size() == totalGoals) {
                        //Creates the match using the Create match method in the JFLManagement class
                        Management.createMatch(homeTeam, awayTeam, matchRef, homeScore, awayScore, matchWeek, goals, assists, yellowCards, redCards);
                        //Increases the goals in the players that have scored goals
                        for (int i = 0; i < Management.getPlayerSize(); i++) {
                            Player player = Management.getPlayer(i);
                            for (int j = 0; j < goals.size(); j++) {
                                Player scorePlayer = goals.get(j);
                                if (player.getFName().equals(scorePlayer.getFName()) && player.getLName().equals(scorePlayer.getLName())) {
                                    player.increaseGoals();
                                }
                            }
                        }
                        //Increases the assists for the players that have assits
                        for (int i = 0; i < Management.getPlayerSize(); i++) {
                            Player player = Management.getPlayer(i);
                            for (int j = 0; j < assists.size(); j++) {
                                Player assistPlayer = assists.get(j);
                                if (player.getFName().equals(assistPlayer.getFName()) && player.getLName().equals(assistPlayer.getLName())) {
                                    player.increaseAssists();
                                }
                            }
                        }
                        //Increases the yellow cards for the players that have assits
                        for (int i = 0; i < Management.getPlayerSize(); i++) {
                            Player player = Management.getPlayer(i);
                            for (int j = 0; j < yellowCards.size(); j++) {
                                Player yellowPlayer = yellowCards.get(j);
                                if (player.getFName().equals(yellowPlayer.getFName()) && player.getLName().equals(yellowPlayer.getLName())) {
                                    player.increaseYellowCards();
                                }
                            }
                        }
                        //Increases the red cards for the players that have red cards
                        for (int i = 0; i < Management.getPlayerSize(); i++) {
                            Player player = Management.getPlayer(i);
                            for (int j = 0; j < redCards.size(); j++) {
                                Player redPlayer = redCards.get(j);
                                if (player.getFName().equals(redPlayer.getFName()) && player.getLName().equals(redPlayer.getLName())) {
                                    player.increaseRedCards();
                                }
                            }
                        }
                        //Add the match to the match history of the teams involved
                        for (int i = 0; i < Management.getPlayerSize(); i++) {
                            Player player = Management.getPlayer(i);
                            for (int j = 0; j < homeTeam.getTeamSize(); j++) {
                                Player homePlayer = homeTeam.getPlayer(j);
                                if (player.getFName().equals(homePlayer.getFName()) && homePlayer.getLName().equals(player.getLName())) {
                                    player.addMatch(Management.getMatch(Management.getMatchSize() - 1));
                                }
                            }

                            for (int j = 0; j < awayTeam.getTeamSize(); j++) {
                                Player awayPlayer = awayTeam.getPlayer(j);
                                if (player.getFName().equals(awayPlayer.getFName()) && player.getLName().equals(awayPlayer.getLName())) {
                                    player.addMatch(Management.getMatch(Management.getMatchSize() - 1));
                                }
                            }
                        }
                        //Clears the variables and UI elements used
                        assists.clear();
                        goals.clear();
                        yellowCards.clear();
                        redCards.clear();
                        awayScores = 0;
                        homeScores = 0;
                        lstRefereesCreateMatch.clearSelection();
                        lstHomeTeam.clearSelection();
                        lstAwayTeam.clearSelection();
                        CreateHomePlayersListManager.removeAllElements();
                        CreateAwayPlayersListManager.removeAllElements();
                        spnHomeScore.setValue(0);
                        spnAwayScore.setValue(0);
                        spnMatchWeek.setValue(0);

                        //Updates the player table
                        Management.updatePlayerTable();
                        //Updates the League table
                        Management.updateLeagueTable();

                        //Sorts the MatchArrayList
                        Management.sortMatches();
                        //Clears the List of matches in "View Matches"
                        MatchesListManager.removeAllElements();
                        //Re-adds the matches in the new order
                        for (int i = 0; i < Management.getMatchSize(); i++) {
                            MatchesListManager.addElement(Management.getMatch(i).getHomeTeam().getTeamName() + " V " + Management.getMatch(i).getAwayTeam().getTeamName());
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Please add the players who scored goals.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a referee.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter a positive number for the match Score and the week");
        }

    }//GEN-LAST:event_btnCreateMatchActionPerformed

    private void btnSelectMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectMatchActionPerformed
        //Get the data from the GUI
        Match selectedMatch = Management.getMatch(lstMatches.getSelectedIndex());
        Team homeTeam = selectedMatch.getHomeTeam();
        Team awayTeam = selectedMatch.getAwayTeam();

        //Add the home team and away team to the relevant labels
        lblViewMatchHome.setText("Home: " + homeTeam.getTeamName());
        lblViewMatchAway.setText("Away: " + awayTeam.getTeamName());

        //Add the home team score and away team score
        lblHomeScore.setText(homeTeam.getTeamName() + " scored: " + String.valueOf(selectedMatch.getHomeScore()));
        lblAwayScore.setText(awayTeam.getTeamName() + " scored: " + String.valueOf(selectedMatch.getAwayScore()));

        //Add the match week
        lblMatchWeek.setText("The match was on week: " + selectedMatch.getWeek());

        //Clear the lists
        ViewHomePlayersListManager.removeAllElements();
        ViewAwayPlayersListManager.removeAllElements();
        ViewGoalsListManager.removeAllElements();
        ViewAssistsListManager.removeAllElements();
        ViewYellowCardsListManager.removeAllElements();
        ViewRedCardsListManager.removeAllElements();

        //Add the home team players
        for (int i = 0; i < homeTeam.getTeamSize(); i++) {
            ViewHomePlayersListManager.addElement(homeTeam.getPlayer(i).getFName() + " " + homeTeam.getPlayer(i).getLName());
        }

        //Add the away team players
        for (int i = 0; i < awayTeam.getTeamSize(); i++) {
            ViewAwayPlayersListManager.addElement(awayTeam.getPlayer(i).getFName() + " " + awayTeam.getPlayer(i).getLName());
        }

        //Add the goal scorers
        for (int i = 0; i < selectedMatch.goalsSize(); i++) {
            ViewGoalsListManager.addElement(selectedMatch.getGoal(i).getFName() + " " + selectedMatch.getGoal(i).getLName());
        }

        //Add the assistors
        for (int i = 0; i < selectedMatch.assistsSize(); i++) {
            ViewAssistsListManager.addElement(selectedMatch.getAssists(i).getFName() + " " + selectedMatch.getAssists(i).getLName());
        }

        //Add the players who got yellow cards
        for (int i = 0; i < selectedMatch.yellowCardsSize(); i++) {
            ViewYellowCardsListManager.addElement(selectedMatch.getYellowCards(i).getFName() + " " + selectedMatch.getYellowCards(i).getLName());
        }

        //Add the players who got red cards
        for (int i = 0; i < selectedMatch.redCardsSize(); i++) {
            ViewRedCardsListManager.addElement(selectedMatch.getRedCards(i).getFName() + " " + selectedMatch.getRedCards(i).getLName());
        }

        //Make the lables and lists visible
        lblViewMatchHome.setVisible(true);
        lblViewMatchAway.setVisible(true);
        lstViewHome.setVisible(true);
        lstViewAway.setVisible(true);
        lblHomeScore.setVisible(true);
        lblAwayScore.setVisible(true);
        lblMatchWeek.setVisible(true);
        lstGoals.setVisible(true);
        lblGoals.setVisible(true);
        lstAssists.setVisible(true);
        lblAssists.setVisible(true);
        lstYellowCards.setVisible(true);
        lblYellowCards.setVisible(true);
        lstRedCards.setVisible(true);
        lblRedCards.setVisible(true);
    }//GEN-LAST:event_btnSelectMatchActionPerformed

    private void btnCreateRefereeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRefereeActionPerformed
        //Get the information from the GUI
        String spnValue = spnRefAge.getValue().toString();
        String work = cmbRefWork.getSelectedItem().toString();
        int refAge = 0;

        //Check to see if a First name is entered
        if (!txtRefFName.getText().isEmpty()) {
            //Check to see if a last name is entered
            if (!txtRefLName.getText().isEmpty()) {
                //Check to see if the age is a positive integer
                if (Integer.parseInt(spnValue) > 0) {
                    //Add the age to the age variable
                    refAge = Integer.parseInt(spnValue);
                    //call the createReferee method from the JFLManagement class
                    Management.createReferee(txtRefFName.getText(), txtRefLName.getText(), refAge, work);
                    //Add the referee to the referee list
                    RefereeListManager.addElement(txtRefFName.getText() + " " + txtRefLName.getText());
                    //Reset the data input fields
                    txtRefFName.setText("");
                    txtRefLName.setText("");
                    spnRefAge.setValue(0);
                    cmbRefWork.setSelectedIndex(0);
                } else {
                    JOptionPane.showMessageDialog(null, "Please Enter a positive number");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please Enter a Last Name");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter a First Name");
        }
    }//GEN-LAST:event_btnCreateRefereeActionPerformed

    private void btnCreateCoachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCoachActionPerformed
        //Get information from the GUI
        String spnValue = spnCoachAge.getValue().toString();
        String formation = cmbCoachFormation.getSelectedItem().toString();
        int coachAge = 0;

        //Check to see if a First name is entered
        if (!txtCoachFName.getText().isEmpty()) {
            //Check to see if a last name is entered
            if (!txtCoachLName.getText().isEmpty()) {
                //Check to see if the age is a whole number
                if (Integer.parseInt(spnValue) > 0) {
                    //Add the age to the age variable
                    coachAge = Integer.parseInt(spnValue);
                    //Use the createCoach method from the JFLManagement class
                    Management.createCoach(txtCoachFName.getText(), txtCoachLName.getText(), coachAge, formation);
                    //Add the new coach to the Coach list
                    CoachListManager.addElement(txtCoachFName.getText() + " " + txtCoachLName.getText());
                    //Reset the data input fields
                    txtCoachFName.setText("");
                    txtCoachLName.setText("");
                    spnCoachAge.setValue(0);
                    cmbCoachFormation.setSelectedIndex(0);

                } else {
                    JOptionPane.showMessageDialog(null, "Please Enter an Age");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please Enter A Last Name");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please Enter A First Name");
        }
    }//GEN-LAST:event_btnCreateCoachActionPerformed

    private void btnCreatePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePlayerActionPerformed

//        Get information from the UI
        String spnValue = spnPlayerAge.getValue().toString();
        String cmbValue = cmbPlayerPosition.getSelectedItem().toString();
        int PlayerAge = 0;

//        Check to see if there is a first name
        if (!txtPlayerFName.getText().isEmpty()) {
//            Check to see if there is a last name
            if (!txtPlayerLName.getText().isEmpty()) {
//                Check to see if the age is a positive number
                if (Integer.parseInt(spnValue) > 0) {
//                    Adding the age to the playerAge variable
                    PlayerAge = Integer.parseInt(spnValue);
//                    Using the createPlayer method from the JFLManagement
                    Management.createPlayer(txtPlayerFName.getText(), txtPlayerLName.getText(), PlayerAge, cmbValue);
//                    Add the player to the player list
                    PlayerListManager.addElement(txtPlayerFName.getText() + " " + txtPlayerLName.getText());

//                    Add the player to the player stats table
                    Object[] data = new Object[7];

                    data[0] = txtPlayerFName.getText() + " " + txtPlayerLName.getText();
                    data[1] = 0;
                    data[2] = 0;
                    data[3] = 0;
                    data[4] = 0;

                    PlayerTableManager.addRow(data);
//                    Clear the data from the input boxes
                    txtPlayerFName.setText("");
                    txtPlayerLName.setText("");
                    spnPlayerAge.setValue(0);
                    cmbPlayerPosition.setSelectedIndex(0);

                } else {
                    JOptionPane.showMessageDialog(null, "Please enter a positive number");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please Enter A Second Name");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter a First Name");
        }
    }//GEN-LAST:event_btnCreatePlayerActionPerformed

    private void btnCreateTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateTeamActionPerformed

        // Check if the team name isn't blank.
        if (txtTeamName.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please input a Team Name");
        } else {
            //Create Team using the createTeam function from the JFLManagement Class
            Management.createTeam(txtTeamName.getText());
//            Add the team to the team list
            TeamListManager.addElement(txtTeamName.getText());

//            Add the team to the League table
            Object[] data = new Object[7];

            data[0] = LeagueTableManager.getRowCount() + 1;
            data[1] = txtTeamName.getText();
            data[2] = 0;
            data[3] = 0;
            data[4] = 0;
            data[5] = 0;
            data[6] = 0;

            LeagueTableManager.addRow(data);
//            Clear the text in the team name field
            txtTeamName.setText("");
        }
    }//GEN-LAST:event_btnCreateTeamActionPerformed

    private void btnRemoveCoachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveCoachActionPerformed
        //Get the data from the GUI
        Coach selectedCoach = Management.getCoach(lstCoaches.getSelectedIndex());
        Team selectedTeam = Management.getTeam(lstTeams.getSelectedIndex());

        //Make sure that the selected coach matches the one on the team
        if (selectedTeam.getCoach().getFName().equals(selectedCoach.getFName()) && selectedTeam.getCoach().getLName().equals(selectedCoach.getLName()) && selectedCoach.getOnTeam() == true) {
            //Use the remove coach function from the team class
            selectedTeam.removeCoach();
            //Set the coach to not be on a team
            selectedCoach.setOnTeam(false);
            //Update the list to not show a team infront of the coach's na,e
            CoachListManager.setElementAt(selectedCoach.getFName() + " " + selectedCoach.getLName(), lstCoaches.getSelectedIndex());
        } else {
            JOptionPane.showMessageDialog(null, "Coach isn't on Team");
        }
    }//GEN-LAST:event_btnRemoveCoachActionPerformed

    private void btnAddCoachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCoachActionPerformed
        //Get information from the GUI
        Coach selectedCoach = Management.getCoach(lstCoaches.getSelectedIndex());
        Team selectedTeam = Management.getTeam(lstTeams.getSelectedIndex());

        //Check to see if the coach isn't on a team
        if (selectedTeam.hasCoach() == false && selectedCoach.getOnTeam() == false) {
            //Call the add coach method from the selected team
            selectedTeam.addCoach(selectedCoach);
            //Change it so that the coach is now on a team
            selectedCoach.setOnTeam(true);
            //Add the team that the coach is on infront of the coach's name
            CoachListManager.setElementAt("Coach is on " + selectedTeam.getTeamName() + ": " + selectedCoach.getFName() + " " + selectedCoach.getLName(), lstCoaches.getSelectedIndex());
        } else {
            JOptionPane.showMessageDialog(null, "This isn't possible.");
        }
    }//GEN-LAST:event_btnAddCoachActionPerformed

    private void btnDeleteRefereeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRefereeActionPerformed
        //Get the data from the GUI
        Referee Ref = Management.getReferee(lstReferees.getSelectedIndex());
        //Remove the Referee from the list
        RefereeListManager.removeElementAt(lstReferees.getSelectedIndex());
        //Call the delete referee function from the JFLManagement class
        Management.deleteReferee(Ref);
    }//GEN-LAST:event_btnDeleteRefereeActionPerformed

    private void btnDeleteCoachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCoachActionPerformed

        //Get the information from the GUI
        Coach selectedCoach = Management.getCoach(lstCoaches.getSelectedIndex());
        //Check to see if the coach is on a team
        if (selectedCoach.getOnTeam() == false) {
            //If they aren't remove them from the Coach list
            CoachListManager.removeElementAt(lstCoaches.getSelectedIndex());
            //call the deleteCoach method from the JFLManagement class
            Management.deleteCoach(lstCoaches.getSelectedIndex());
        } else {
            JOptionPane.showMessageDialog(null, "Please remove the coach from the team before deleting");
        }

    }//GEN-LAST:event_btnDeleteCoachActionPerformed

    private void btnRemovePlayerfromTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePlayerfromTeamActionPerformed
        //Get the selected team and player from the UI
        //Get the selected objects from the JFLManagement class
        Player selectedPlayer = Management.getPlayer(lstPlayers.getSelectedIndex());
        Team selectedTeam = Management.getTeam(lstTeams.getSelectedIndex());

        //Check to see if the selected player is on the selected team.
        if (selectedPlayer.getOnTeam() == true && selectedPlayer.getTeam().equals(selectedTeam) == true) {
//            use the removePlayer method from the selected team
            selectedTeam.removePlayer(selectedPlayer);
//            update the player to not be on a team
            selectedPlayer.setOnTeam(false, null);
//            update the player list to not have the team name infront of the player
            PlayerListManager.setElementAt(selectedPlayer.getFName() + " " + selectedPlayer.getLName(), lstPlayers.getSelectedIndex());
        } else {
            JOptionPane.showMessageDialog(null, "Player isn't on a team");
        }
    }//GEN-LAST:event_btnRemovePlayerfromTeamActionPerformed

    private void btnAddPlayerToTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPlayerToTeamActionPerformed
        //Get the information from the GUI
        int selectedTeam = lstTeams.getSelectedIndex();
        int selectedPlayer = lstPlayers.getSelectedIndex();
        //Get the selected player from the JFLManagement class
        Player AddPlayer = Management.getPlayer(selectedPlayer);

        //Check to see if the player is on a team
        if (AddPlayer.getOnTeam() == false) {
            //get the selected team from the JFLManagement class and then use the addPlayer method from the Team class.
            Management.getTeam(selectedTeam).addPlayer(AddPlayer);
            //Update the player list to show what team the player is on.
            PlayerListManager.setElementAt("Player is on " + lstTeams.getSelectedValue() + " : " + lstPlayers.getSelectedValue(), selectedPlayer);
            //Update the player to show that they are on a team
            AddPlayer.setOnTeam(true, Management.getTeam(selectedTeam).getTeamName());
        } else {
            JOptionPane.showMessageDialog(null, "Player is already on a team.");
        }

    }//GEN-LAST:event_btnAddPlayerToTeamActionPerformed

    private void btnDeleteTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTeamActionPerformed
        //Get information from GUI
        int Selected = lstTeams.getSelectedIndex();

        //Remove the team from the Team list
        TeamListManager.removeElementAt(Selected);
        //Use the deleteTeam method from JFLManagement
        Management.deleteTeam(Selected);
    }//GEN-LAST:event_btnDeleteTeamActionPerformed

    private void btnDeletePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePlayerActionPerformed
        //Get the information from the GUI
        int Selected = lstPlayers.getSelectedIndex();
//        Remove the player from the Player list
        PlayerListManager.removeElementAt(Selected);
//        use the deletePlayer method from JFLManagement
        Management.deletePlayer(Selected);
    }//GEN-LAST:event_btnDeletePlayerActionPerformed

    private void lstHomeTeamValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstHomeTeamValueChanged
        //Check to see if a team is selected
        if (lstHomeTeam.getSelectedIndex() >= 0) {
            //Get the selected team
            Team homeTeam = Management.getTeam(lstHomeTeam.getSelectedIndex());
            //Clear the home team players list of players
            CreateHomePlayersListManager.removeAllElements();
            //Clear the goals scored ArrayList
            goals.clear();
            //Clear the variables for the scores
            awayScores = 0;
            homeScores = 0;
            //Add the players to the list
            for (int i = 0; i < homeTeam.getTeamSize(); i++) {
                CreateHomePlayersListManager.addElement(homeTeam.getPlayer(i).getFName() + " " + homeTeam.getPlayer(i).getLName());
            }
        }
    }//GEN-LAST:event_lstHomeTeamValueChanged

    private void lstAwayTeamValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstAwayTeamValueChanged
        //Check to see if a team is selected
        if (lstAwayTeam.getSelectedIndex() >= 0) {
            //Get the selected team
            Team awayTeam = Management.getTeam(lstAwayTeam.getSelectedIndex());
            //Clear the away players list of players
            CreateAwayPlayersListManager.removeAllElements();
            //Clear the goals scored ArrayList
            goals.clear();
            //Clear the variables for the scores
            awayScores = 0;
            homeScores = 0;
            //Add the players to the list
            for (int i = 0; i < awayTeam.getTeamSize(); i++) {
                CreateAwayPlayersListManager.addElement(awayTeam.getPlayer(i).getFName() + " " + awayTeam.getPlayer(i).getLName());
            }
        }
    }//GEN-LAST:event_lstAwayTeamValueChanged

    private void btnScoredGoalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScoredGoalActionPerformed
        //Get the data from the GUI
        String spnHomeValue = spnHomeScore.getValue().toString();
        String spnAwayValue = spnAwayScore.getValue().toString();

        //Check to see if the data can be passed into the variables
        if (Integer.parseInt(spnHomeValue) >= 0 && Integer.parseInt(spnAwayValue) >= 0) {
            //Add the data to the variables
            int homeValue = Integer.parseInt(spnHomeValue);
            int awayValue = Integer.parseInt(spnAwayValue);
            int totalGoals = homeValue + awayValue;
            //Check to see if another goal can be scored
            if (totalGoals > goals.size()) {
                //Check to see if its a home team goal
                if (lstHomePlayers.isSelectionEmpty() == false && homeValue > homeScores) {
                    //Get the player
                    Player HPlayer = Management.getTeam(lstHomeTeam.getSelectedIndex()).getPlayer(lstHomePlayers.getSelectedIndex());
                    //Add the player to the goals ArrayList
                    goals.add(HPlayer);
                    //Clear the selection in the list
                    lstHomePlayers.clearSelection();
                    //Increase the home goals
                    homeScores = homeScores + 1;
                    //Check to see if its an away team
                } else if (lstAwayPlayers.isSelectionEmpty() == false && awayValue > awayScores) {
                    //Get the player
                    Player APlayer = Management.getTeam(lstAwayTeam.getSelectedIndex()).getPlayer(lstAwayPlayers.getSelectedIndex());
                    //Add the player to the ArrayList
                    goals.add(APlayer);
                    //Clear the selection in the list
                    lstAwayPlayers.clearSelection();
                    //Increae away gials
                    awayScores = awayScores + 1;
                } else {
                    JOptionPane.showMessageDialog(null, "Too many goals by this team");
                    lstHomePlayers.clearSelection();
                    lstAwayPlayers.clearSelection();
                }
            } else {
                JOptionPane.showMessageDialog(null, "There are too many goals being scored");
                lstHomePlayers.clearSelection();
                lstAwayPlayers.clearSelection();
            }
        }

    }//GEN-LAST:event_btnScoredGoalActionPerformed

    private void btnAssistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssistActionPerformed
        //Check to see if its the home team
        if (lstHomePlayers.isSelectionEmpty() == false) {
            //Get the selected Player
            Player hPlayer = Management.getTeam(lstHomeTeam.getSelectedIndex()).getPlayer(lstHomePlayers.getSelectedIndex());
            //Add the player to the arrayList
            assists.add(hPlayer);
            //Clear the selection in the list
            lstHomePlayers.clearSelection();
        }

        //Check to see if its the away team
        if (lstAwayPlayers.isSelectionEmpty() == false) {
            //Get the selected player
            Player aPlayer = Management.getTeam(lstAwayTeam.getSelectedIndex()).getPlayer(lstAwayPlayers.getSelectedIndex());
            //Add the player to the assits ArrayList
            assists.add(aPlayer);
            //Clear the selection from the list
            lstAwayPlayers.clearSelection();
        }
    }//GEN-LAST:event_btnAssistActionPerformed

    private void btnYellowCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYellowCardActionPerformed
        //Check to see if its on the Home team
        if (lstHomePlayers.isSelectionEmpty() == false) {
            //Get the selected player
            Player hPlayer = Management.getTeam(lstHomeTeam.getSelectedIndex()).getPlayer(lstHomePlayers.getSelectedIndex());
            //Add the player to the ArrayList
            yellowCards.add(hPlayer);
            //Clear the selected player in the list
            lstHomePlayers.clearSelection();
        }

        //Check to see if its the away team
        if (lstAwayPlayers.isSelectionEmpty() == false) {
            //Get the selected player
            Player aPlayer = Management.getTeam(lstAwayTeam.getSelectedIndex()).getPlayer(lstAwayPlayers.getSelectedIndex());
            //Add the player to the arraylist
            yellowCards.add(aPlayer);
            //Clear the selected player in the list
            lstAwayPlayers.clearSelection();
        }
    }//GEN-LAST:event_btnYellowCardActionPerformed

    private void btnRedCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedCardActionPerformed
        //Check to see if the selected player is on the home team
        if (lstHomePlayers.isSelectionEmpty() == false) {
            //get the selected player
            Player hPlayer = Management.getTeam(lstHomeTeam.getSelectedIndex()).getPlayer(lstHomePlayers.getSelectedIndex());
            //Add the player to the ArrayList
            redCards.add(hPlayer);
            //Clear the selected player in the list
            lstHomePlayers.clearSelection();
        }

        //Check to see if the player is on the away team
        if (lstAwayPlayers.isSelectionEmpty() == false) {
            //get the selected player
            Player aPlayer = Management.getTeam(lstAwayTeam.getSelectedIndex()).getPlayer(lstAwayPlayers.getSelectedIndex());
            //add the player to the ArrayList
            redCards.add(aPlayer);
            //Clear the selected player in the list
            lstAwayPlayers.clearSelection();
        }
    }//GEN-LAST:event_btnRedCardActionPerformed

    private void btnSelectPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectPlayerActionPerformed
        //Get the selected player from the GUI
        Player selectedPlayer = Management.getPlayer(lstPlayerProfiles.getSelectedIndex());

        //Clear the player match history list
        PlayerMatchListManager.removeAllElements();

        //Add the selected players match history
        for (int i = 0; i < selectedPlayer.matchSize(); i++) {
            PlayerMatchListManager.addElement(selectedPlayer.getMatch(i).getHomeTeam().getTeamName() + " V " + selectedPlayer.getMatch(i).getAwayTeam().getTeamName());
        }

        //Add the name
        lblPlayerName.setText(selectedPlayer.getFName() + " " + selectedPlayer.getLName());
        //Add the age
        lblPlayerAge.setText("This player is: " + selectedPlayer.getAge() + " years old.");
        //Add the position
        lblPlayerPosition.setText("The Player plays the: " + selectedPlayer.getPosition() + " position.");
        //Check to see if the player is on a team if they are display the team if not the hide the label
        if (selectedPlayer.getOnTeam() == true) {
            lblPlayerTeam.setText("Player is on team: " + Management.teamContains(selectedPlayer));
            lblPlayerTeam.setVisible(true);
        } else {
            lblPlayerTeam.setVisible(false);
        }
        //Add the players total goals
        lblPlayerGoals.setText("Player has Scored: " + selectedPlayer.getTotalGoals() + " goals.");
        //Add the players total assists
        lblPlayerAssists.setText("Player has: " + selectedPlayer.getTotalAssists() + " assists.");
        //Add the players total yellow cards
        lblPlayerYellowCards.setText("Player has: " + selectedPlayer.getYellowCards() + " Yellow Cards.");
        //Add the players total red cards
        lblPlayerRedCards.setText("Player has: " + selectedPlayer.getRedCards() + " Red Cards.");

        //Make the lists and labels visible
        lstPlayerMatches.setVisible(true);
        lblPlayerName.setVisible(true);
        lblPlayerAge.setVisible(true);
        lblPlayerPosition.setVisible(true);
        lblPlayerGoals.setVisible(true);
        lblPlayerAssists.setVisible(true);
        lblPlayerYellowCards.setVisible(true);
        lblPlayerRedCards.setVisible(true);

    }//GEN-LAST:event_btnSelectPlayerActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Call the Save data method from the JFLManagement class
        Management.saveData();
    }//GEN-LAST:event_formWindowClosing

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        //Call the Save data method from the JFLManagement class
        Management.saveData();
        //Show a message that the data was saved
        JOptionPane.showMessageDialog(null, "Data Saved");
    }//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadActionPerformed
        //Create a file chooser
        JFileChooser loadMatches = new JFileChooser();
        //Save the opendialog return value
        int returnVal = loadMatches.showOpenDialog(this);
        //Check to see if the file has been selected
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Saves the selected file patch
            File chosenFile = loadMatches.getSelectedFile();
            try {
                //calls the updateMatches method from the JFLManagement class
                Management.updateMatches(chosenFile);

            } catch (IOException ex) {
                ex.printStackTrace();

            } catch (ClassNotFoundException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_mnuLoadActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        //Getting the data from the GUI.
        String FName = txtSearchFName.getText();
        String LName = txtSearchLName.getText();
        String position = cmbSearchPosition.getSelectedItem().toString();
        String job = cmbSearchJob.getSelectedItem().toString();

        //Clears the results list
        SearchResultsListManager.removeAllElements();

        //Checks to see what the user has searched and then adds the results to the results list
        if (LName.equals("") && position.equals("Select Position") && job.equals("Select Job")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getFName().equals(FName)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
            for (int i = 0; i < Management.getCoachSize(); i++) {
                if (Management.getCoach(i).getFName().equals(FName)) {
                    SearchResultsListManager.addElement(Management.getCoach(i).getFName() + " " + Management.getCoach(i).getLName());
                }
            }
            for (int i = 0; i < Management.getRefereeSize(); i++) {
                if (Management.getReferee(i).getFName().equals(FName)) {
                    SearchResultsListManager.addElement(Management.getReferee(i).getFName() + " " + Management.getReferee(i).getLName());
                }
            }
        } else if (FName.equals("") && position.equals("Select Position") && job.equals("Select Job")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getLName().equals(LName)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
            for (int i = 0; i < Management.getCoachSize(); i++) {
                if (Management.getCoach(i).getLName().equals(LName)) {
                    SearchResultsListManager.addElement(Management.getCoach(i).getFName() + " " + Management.getCoach(i).getLName());
                }
            }
            for (int i = 0; i < Management.getRefereeSize(); i++) {
                if (Management.getReferee(i).getLName().equals(LName)) {
                    SearchResultsListManager.addElement(Management.getReferee(i).getFName() + " " + Management.getReferee(i).getLName());
                }
            }
        } else if (position.equals("Select Position") && job.equals("Select Job")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getLName().equals(LName) && Management.getPlayer(i).getFName().equals(FName)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
            for (int i = 0; i < Management.getCoachSize(); i++) {
                if (Management.getCoach(i).getFName().equals(FName) && Management.getCoach(i).getLName().equals(LName)) {
                    SearchResultsListManager.addElement(Management.getCoach(i).getFName() + " " + Management.getCoach(i).getLName());
                }
            }
            for (int i = 0; i < Management.getRefereeSize(); i++) {
                if (Management.getReferee(i).getFName().equals(FName) && Management.getReferee(i).getLName().equals(LName)) {
                    SearchResultsListManager.addElement(Management.getReferee(i).getFName() + " " + Management.getReferee(i).getLName());
                }
            }
        } else if (FName.equals("") && LName.equals("") && job.equals("Select Job")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getPosition().equals(position)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
        } else if (FName.equals("") && LName.equals("") && position.equals("Select Position")) {
            if (job.equals("Player")) {
                for (int i = 0; i < Management.getPlayerSize(); i++) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            } else if (job.equals("Coach")) {
                for (int i = 0; i < Management.getCoachSize(); i++) {
                    SearchResultsListManager.addElement(Management.getCoach(i).getFName() + " " + Management.getCoach(i).getLName());
                }
            } else if (job.equals("Referee")) {
                for (int i = 0; i < Management.getRefereeSize(); i++) {
                    SearchResultsListManager.addElement(Management.getReferee(i).getFName() + " " + Management.getReferee(i).getLName());
                }
            }
        } else if (FName.equals("") && LName.equals("")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getPosition().equals(position)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
        } else if (LName.equals("") && job.equals("Select Job")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getPosition().equals(position) && Management.getPlayer(i).getFName().equals(FName)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
        } else if (FName.equals("") && job.equals("Select Job")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getPosition().equals(position) && Management.getPlayer(i).getLName().equals(LName)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
        } else if (LName.equals("") && position.equals("Select Position")) {
            if (job.equals("Player")) {
                for (int i = 0; i < Management.getPlayerSize(); i++) {
                    if (Management.getPlayer(i).getFName().equals(FName)) {
                        SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                    }
                }
            } else if (job.equals("Coach")) {
                for (int i = 0; i < Management.getCoachSize(); i++) {
                    if (Management.getCoach(i).getFName().equals(FName)) {
                        SearchResultsListManager.addElement(Management.getCoach(i).getFName() + " " + Management.getCoach(i).getLName());
                    }

                }
            } else if (job.equals("Referee")) {
                for (int i = 0; i < Management.getRefereeSize(); i++) {
                    if (Management.getReferee(i).getFName().equals(FName)) {
                        SearchResultsListManager.addElement(Management.getReferee(i).getFName() + " " + Management.getReferee(i).getLName());
                    }
                }
            }
        } else if (FName.equals("") && position.equals("Select Position")) {
            if (job.equals("Player")) {
                for (int i = 0; i < Management.getPlayerSize(); i++) {
                    if (Management.getPlayer(i).getLName().equals(LName)) {
                        SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                    }
                }
            } else if (job.equals("Coach")) {
                for (int i = 0; i < Management.getCoachSize(); i++) {
                    if (Management.getCoach(i).getLName().equals(LName)) {
                        SearchResultsListManager.addElement(Management.getCoach(i).getFName() + " " + Management.getCoach(i).getLName());
                    }

                }
            } else if (job.equals("Referee")) {
                for (int i = 0; i < Management.getRefereeSize(); i++) {
                    if (Management.getReferee(i).getLName().equals(LName)) {
                        SearchResultsListManager.addElement(Management.getReferee(i).getFName() + " " + Management.getReferee(i).getLName());
                    }
                }
            }
        } else if (job.equals("Select Job")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getPosition().equals(position) && Management.getPlayer(i).getFName().equals(FName) && Management.getPlayer(i).getLName().equals(LName)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
        } else if (position.equals("Select Position")) {
            if (job.equals("Player")) {
                for (int i = 0; i < Management.getPlayerSize(); i++) {
                    if (Management.getPlayer(i).getLName().equals(LName) && Management.getPlayer(i).getFName().equals(FName)) {
                        SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                    }
                }
            } else if (job.equals("Coach")) {
                for (int i = 0; i < Management.getCoachSize(); i++) {
                    if (Management.getCoach(i).getLName().equals(LName) && Management.getCoach(i).getFName().equals(FName)) {
                        SearchResultsListManager.addElement(Management.getCoach(i).getFName() + " " + Management.getCoach(i).getLName());
                    }

                }
            } else if (job.equals("Referee")) {
                for (int i = 0; i < Management.getRefereeSize(); i++) {
                    if (Management.getReferee(i).getLName().equals(LName) && Management.getReferee(i).getFName().equals(FName)) {
                        SearchResultsListManager.addElement(Management.getReferee(i).getFName() + " " + Management.getReferee(i).getLName());
                    }
                }
            }
        } else if (job.equals("Player") && FName.equals("")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getPosition().equals(position) && Management.getPlayer(i).getLName().equals(LName)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
        } else if (job.equals("Player") && LName.equals("")) {
            for (int i = 0; i < Management.getPlayerSize(); i++) {
                if (Management.getPlayer(i).getPosition().equals(position) && Management.getPlayer(i).getFName().equals(FName)) {
                    SearchResultsListManager.addElement(Management.getPlayer(i).getFName() + " " + Management.getPlayer(i).getLName());
                }
            }
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * The Manager for the team list
     */
    public static DefaultListModel TeamListManager = new DefaultListModel();

    /**
     * The manager for the player list
     */
    public static DefaultListModel PlayerListManager = new DefaultListModel();

    /**
     * The manager for the coach list
     */
    public static DefaultListModel CoachListManager = new DefaultListModel();

    /**
     * The manager for the referee list
     */
    public static DefaultListModel RefereeListManager = new DefaultListModel();

    /**
     * The manager for the matches list
     */
    public static DefaultListModel MatchesListManager = new DefaultListModel();
    DefaultListModel ViewHomePlayersListManager = new DefaultListModel();
    DefaultListModel ViewAwayPlayersListManager = new DefaultListModel();

    /**
     * The manager for the home players list in create matches
     */
    public static DefaultListModel CreateHomePlayersListManager = new DefaultListModel();

    /**
     * The manager for the away players list in create matches
     */
    public static DefaultListModel CreateAwayPlayersListManager = new DefaultListModel();
    DefaultListModel ViewGoalsListManager = new DefaultListModel();
    DefaultListModel ViewAssistsListManager = new DefaultListModel();
    DefaultListModel ViewYellowCardsListManager = new DefaultListModel();
    DefaultListModel ViewRedCardsListManager = new DefaultListModel();

    /**
     * The manager for the player match history list
     */
    public static DefaultListModel PlayerMatchListManager = new DefaultListModel();
    DefaultListModel SearchResultsListManager = new DefaultListModel();

    /**
     * The manager for the league table
     */
    public static DefaultTableModel LeagueTableManager = new DefaultTableModel();
    Object[] leagueColumns = {"Rank", "Club", "Wins", "Draws", "Losses", "Total Goals", "Points"};

    /**
     * The manager for the player statistics table
     */
    public static DefaultTableModel PlayerTableManager = new DefaultTableModel();
    Object[] playerColumns = {"Name", "Total Goals", "Total Assists", "Total Yellow Cards", "Total Red Cards"};

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCoach;
    private javax.swing.JButton btnAddPlayerToTeam;
    private javax.swing.JButton btnAssist;
    private javax.swing.JButton btnCreateCoach;
    private javax.swing.JButton btnCreateMatch;
    private javax.swing.JButton btnCreatePlayer;
    private javax.swing.JButton btnCreateReferee;
    private javax.swing.JButton btnCreateTeam;
    private javax.swing.JButton btnDeleteCoach;
    private javax.swing.JButton btnDeletePlayer;
    private javax.swing.JButton btnDeleteReferee;
    private javax.swing.JButton btnDeleteTeam;
    private javax.swing.JButton btnRedCard;
    private javax.swing.JButton btnRemoveCoach;
    private javax.swing.JButton btnRemovePlayerfromTeam;
    private javax.swing.JButton btnScoredGoal;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelectMatch;
    private javax.swing.JButton btnSelectPlayer;
    private javax.swing.JButton btnYellowCard;
    private javax.swing.JComboBox<String> cmbCoachFormation;
    private javax.swing.JComboBox<String> cmbPlayerPosition;
    private javax.swing.JComboBox<String> cmbRefWork;
    private javax.swing.JComboBox<String> cmbSearchJob;
    private javax.swing.JComboBox<String> cmbSearchPosition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblAssists;
    private javax.swing.JLabel lblAwayScore;
    private javax.swing.JLabel lblGoals;
    private javax.swing.JLabel lblHomeScore;
    private javax.swing.JLabel lblMatchWeek;
    private javax.swing.JLabel lblPlayerAge;
    private javax.swing.JLabel lblPlayerAssists;
    private javax.swing.JLabel lblPlayerGoals;
    private javax.swing.JLabel lblPlayerName;
    private javax.swing.JLabel lblPlayerPosition;
    private javax.swing.JLabel lblPlayerRedCards;
    private javax.swing.JLabel lblPlayerTeam;
    private javax.swing.JLabel lblPlayerYellowCards;
    private javax.swing.JLabel lblRedCards;
    private javax.swing.JLabel lblViewMatchAway;
    private javax.swing.JLabel lblViewMatchHome;
    private javax.swing.JLabel lblYellowCards;
    private javax.swing.JList<String> lstAssists;
    private javax.swing.JList<String> lstAwayPlayers;
    private javax.swing.JList<String> lstAwayTeam;
    private javax.swing.JList<String> lstCoaches;
    private javax.swing.JList<String> lstGoals;
    private javax.swing.JList<String> lstHomePlayers;
    private javax.swing.JList<String> lstHomeTeam;
    private javax.swing.JList<String> lstMatches;
    private javax.swing.JList<String> lstPlayerMatches;
    private javax.swing.JList<String> lstPlayerProfiles;
    private javax.swing.JList<String> lstPlayers;
    private javax.swing.JList<String> lstRedCards;
    private javax.swing.JList<String> lstReferees;
    private javax.swing.JList<String> lstRefereesCreateMatch;
    private javax.swing.JList lstTeams;
    private javax.swing.JList<String> lstViewAway;
    private javax.swing.JList<String> lstViewHome;
    private javax.swing.JList<String> lstYellowCards;
    private javax.swing.JMenu mnuBar;
    private javax.swing.JMenuItem mnuLoad;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JPanel pnlCreate;
    private javax.swing.JPanel pnlManage;
    private javax.swing.JSpinner spnAwayScore;
    private javax.swing.JSpinner spnCoachAge;
    private javax.swing.JSpinner spnHomeScore;
    private javax.swing.JSpinner spnMatchWeek;
    private javax.swing.JSpinner spnPlayerAge;
    private javax.swing.JSpinner spnRefAge;
    private javax.swing.JTabbedPane tbdpaneJFLManagement;
    private javax.swing.JTable tblMatches;
    private javax.swing.JTable tblPlayers;
    private javax.swing.JTextField txtCoachFName;
    private javax.swing.JTextField txtCoachLName;
    private javax.swing.JTextField txtPlayerFName;
    private javax.swing.JTextField txtPlayerLName;
    private javax.swing.JTextField txtRefFName;
    private javax.swing.JTextField txtRefLName;
    private javax.swing.JTextField txtSearchFName;
    private javax.swing.JTextField txtSearchLName;
    private javax.swing.JTextField txtTeamName;
    // End of variables declaration//GEN-END:variables
}
